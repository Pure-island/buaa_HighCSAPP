/*
 * Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40, 2019-05-24)
 * 
 * On Sat Jun 24 13:51:19 CST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTests.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTests::MODEL_mkTests()
{
  mkTests_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTests()
{
  MODEL_mkTests *model = new MODEL_mkTests();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTests &INST_top = *((MOD_mkTests *)(instance_ptr));
	 INST_top.DEF_CAN_FIRE_RL_rsp_rule1 = INST_top.INST_rsp_stage1_1bit.METH_i_notFull() && INST_top.INST_rsp_entry.METH_i_notEmpty();
	 INST_top.DEF_WILL_FIRE_RL_rsp_rule1 = INST_top.DEF_CAN_FIRE_RL_rsp_rule1;
	 INST_top.DEF_CAN_FIRE_RL_rsp_rule2 = INST_top.INST_rsp_stage2_2bits.METH_i_notFull() && INST_top.INST_rsp_stage1_1bit.METH_i_notEmpty();
	 INST_top.DEF_WILL_FIRE_RL_rsp_rule2 = INST_top.DEF_CAN_FIRE_RL_rsp_rule2;
	 INST_top.DEF_CAN_FIRE_RL_rsp_rule3 = INST_top.INST_rsp_stage3_4bits.METH_i_notFull() && INST_top.INST_rsp_stage2_2bits.METH_i_notEmpty();
	 INST_top.DEF_WILL_FIRE_RL_rsp_rule3 = INST_top.DEF_CAN_FIRE_RL_rsp_rule3;
	 INST_top.DEF_CAN_FIRE_RL_rsp_rule4 = INST_top.INST_rsp_stage4_8bits.METH_i_notFull() && INST_top.INST_rsp_stage3_4bits.METH_i_notEmpty();
	 INST_top.DEF_WILL_FIRE_RL_rsp_rule4 = INST_top.DEF_CAN_FIRE_RL_rsp_rule4;
	 INST_top.DEF_CAN_FIRE_RL_rsp_rule5 = INST_top.INST_rsp_stage5_16bits.METH_i_notFull() && INST_top.INST_rsp_stage4_8bits.METH_i_notEmpty();
	 INST_top.DEF_WILL_FIRE_RL_rsp_rule5 = INST_top.DEF_CAN_FIRE_RL_rsp_rule5;
	 INST_top.DEF_CAN_FIRE_RL_test = INST_top.INST_rsp_stage5_16bits.METH_i_notEmpty() && INST_top.INST_answerFifo.METH_i_notEmpty();
	 INST_top.DEF_WILL_FIRE_RL_test = INST_top.DEF_CAN_FIRE_RL_test;
	 INST_top.DEF_CAN_FIRE_RL_run = INST_top.INST_rsp_entry.METH_i_notFull() && INST_top.INST_answerFifo.METH_i_notFull();
	 INST_top.DEF_WILL_FIRE_RL_run = INST_top.DEF_CAN_FIRE_RL_run;
	 if (INST_top.DEF_WILL_FIRE_RL_rsp_rule1)
	   INST_top.RL_rsp_rule1();
	 if (INST_top.DEF_WILL_FIRE_RL_rsp_rule2)
	   INST_top.RL_rsp_rule2();
	 if (INST_top.DEF_WILL_FIRE_RL_rsp_rule3)
	   INST_top.RL_rsp_rule3();
	 if (INST_top.DEF_WILL_FIRE_RL_rsp_rule4)
	   INST_top.RL_rsp_rule4();
	 if (INST_top.DEF_WILL_FIRE_RL_rsp_rule5)
	   INST_top.RL_rsp_rule5();
	 if (INST_top.DEF_WILL_FIRE_RL_test)
	   INST_top.RL_test();
	 if (INST_top.DEF_WILL_FIRE_RL_run)
	   INST_top.RL_run();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_rsp_entry.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_rsp_stage1_1bit.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_rsp_stage2_2bits.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_rsp_stage3_4bits.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_rsp_stage4_8bits.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_rsp_stage5_16bits.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_tbCounter.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_answerFifo.rst_tick_clk((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTests::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTests_instance = new MOD_mkTests(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTests_instance->INST_rsp_entry.set_clk_0)("CLK");
  (mkTests_instance->INST_rsp_stage1_1bit.set_clk_0)("CLK");
  (mkTests_instance->INST_rsp_stage2_2bits.set_clk_0)("CLK");
  (mkTests_instance->INST_rsp_stage3_4bits.set_clk_0)("CLK");
  (mkTests_instance->INST_rsp_stage4_8bits.set_clk_0)("CLK");
  (mkTests_instance->INST_rsp_stage5_16bits.set_clk_0)("CLK");
  (mkTests_instance->INST_answerFifo.set_clk_0)("CLK");
  (mkTests_instance->set_clk_0)("CLK");
}
void MODEL_mkTests::destroy_model()
{
  delete mkTests_instance;
  mkTests_instance = NULL;
}
void MODEL_mkTests::reset_model(bool asserted)
{
  (mkTests_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTests::get_instance()
{
  return mkTests_instance;
}

/* Fill in version numbers */
void MODEL_mkTests::get_version(unsigned int *year,
				unsigned int *month,
				char const **annotation,
				char const **build)
{
  *year = 2019u;
  *month = 5u;
  *annotation = "beta2";
  *build = "a88bf40";
}

/* Get the model creation time */
time_t MODEL_mkTests::get_creation_time()
{
  
  /* Sat Jun 24 05:51:19 UTC 2023 */
  return 1687585879llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTests::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTests::dump_state()
{
  (mkTests_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTests & mkTests_backing(tSimStateHdl simHdl)
{
  static MOD_mkTests *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTests(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTests::dump_VCD_defs()
{
  (mkTests_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTests::dump_VCD(tVCDDumpType dt)
{
  (mkTests_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTests_backing(sim_hdl));
}
